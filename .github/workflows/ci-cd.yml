name: CI/CD

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  lint-build-test:
    name: Lint, Build, and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm lint

      - name: Run tests (optional)
        run: pnpm test:bdd || true

      - name: Extract short SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=production \
            --build-arg IS_BUILD=custom \
            --build-arg OPTIMIZELY_API_URL=${{ secrets.OPTIMIZELY_API_URL }} \
            --build-arg OPTIMIZELY_SINGLE_KEY=${{ secrets.OPTIMIZELY_SINGLE_KEY }} \
            --build-arg OPTIMIZELY_PREVIEW_SECRET=${{ secrets.OPTIMIZELY_PREVIEW_SECRET }} \
            --build-arg OPTIMIZELY_LAYOUT_ID=${{ secrets.OPTIMIZELY_LAYOUT_ID }} \
            -t ${{ secrets.DOCKER_USERNAME }}/optimizely-fe:${{ steps.vars.outputs.sha_short }} .

  docker-publish:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: lint-build-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract short SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        run: |
          docker build \
            --build-arg NODE_ENV=production \
            --build-arg IS_BUILD=custom \
            --build-arg OPTIMIZELY_API_URL=${{ secrets.OPTIMIZELY_API_URL }} \
            --build-arg OPTIMIZELY_SINGLE_KEY=${{ secrets.OPTIMIZELY_SINGLE_KEY }} \
            --build-arg OPTIMIZELY_PREVIEW_SECRET=${{ secrets.OPTIMIZELY_PREVIEW_SECRET }} \
            --build-arg OPTIMIZELY_LAYOUT_ID=${{ secrets.OPTIMIZELY_LAYOUT_ID }} \
            -t ${{ secrets.DOCKER_USERNAME }}/optimizely-fe:${{ steps.vars.outputs.sha_short }} \
            -t ${{ secrets.DOCKER_USERNAME }}/optimizely-fe:latest .

          docker push ${{ secrets.DOCKER_USERNAME }}/optimizely-fe:${{ steps.vars.outputs.sha_short }}
          docker push ${{ secrets.DOCKER_USERNAME }}/optimizely-fe:latest
