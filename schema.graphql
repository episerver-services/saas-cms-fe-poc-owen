type Query {
  """
  A viewer that wraps all operations authenticated via security scheme 'Http', which is of type 'http' 'bearer'
  """
  viewerBearerAuth(token: String!): ViewerBearerAuth

  """
  A viewer that wraps operations for all available authentication mechanisms
  """
  viewerAnyAuth(http: HttpInput): ViewerAnyAuth
}

"""A viewer for security scheme 'Http'"""
type ViewerBearerAuth {
  """
  Gets the changeset with the provided key.
  
  Equivalent to GET /changesets/{key}
  """
  changeset(
    """The key of the changeset to retrieve."""
    key: String!
  ): Changeset

  """
  Gets the changeset item for the specified content reference.
  
  Equivalent to GET /changesets/{changeset}/items/{key}/versions/{version}
  """
  changesetItem(
    """The changeset key"""
    changeset: String!

    """The content key"""
    key: String!

    """The content version"""
    version: String!
  ): ChangesetItem

  "Lists the available changeset items for the specified changeset using\r\nthe provided options.\n\nEquivalent to GET /changesets/{changeset}/items"
  changesetItemPage(
    """The changeset key"""
    changeset: String!
    pageIndex: Int
    pageSize: Int
  ): ChangesetItemPage

  """
  Lists all changeset using the provided options.
  
  Equivalent to GET /changesets
  """
  changesetPage(pageIndex: Int, pageSize: Int): ChangesetPage

  """
  Get the content item with the provided key and version.
  
  Equivalent to GET /content/{key}/versions/{version}
  """
  contentItem(key: String!, locale: String, version: String!): ContentItem

  """
  List content versions based on the provided query options.
  
  Equivalent to GET /content/versions
  """
  contentItemPage(
    "Indicates which content locales that should be listed. Use 'NEUTRAL' to include locale-neutral content.\r\nLocale must be a valid IETF BCP-47 language tag."
    locales: [String]
    pageIndex: Int
    pageSize: Int

    """Indicates which status content versions must have to be listed."""
    statuses: [VersionStatus]
  ): ContentItemPage

  """
  List the assets that belongs to a content instance.
  
  Equivalent to GET /content/{key}/assets
  """
  contentListAssets(
    """Indicates which content types or base types to include in the list."""
    contentTypes: [String]

    """The key of the content to retrieve assets for."""
    key: String!
    pageIndex: Int
    pageSize: Int
  ): ContentMetadataPage

  """
  List the content items located in a specific container.
  
  Equivalent to GET /content/{key}/items
  """
  contentListItems(
    """Indicates which content types or base types to include in the list."""
    contentTypes: [String]

    """The key of the content to retrieve items for."""
    key: String!
    pageIndex: Int
    pageSize: Int
  ): ContentMetadataPage

  """
  List versions of the content item with the provided key and the provided options.
  
  Equivalent to GET /content/{key}/versions
  """
  contentListVersions(
    key: String!

    "Indicates which content locales that should be listed. Use 'NEUTRAL' to include locale-neutral content.\r\nLocale must be a valid IETF BCP-47 language tag."
    locales: [String]
    pageIndex: Int
    pageSize: Int

    """Indicates which status content versions must have to be listed."""
    statuses: [VersionStatus]
  ): ContentItemPage

  """
  Get shared metadata about the content instance with the provided key.
  
  Equivalent to GET /content/{key}
  """
  contentMetadata(
    """Indicates that metadata for a deleted content may be returned."""
    allowDeleted: Boolean

    """The key of the content to retrieve metadata for."""
    key: String!
  ): ContentMetadata

  """
  Get the content path with the provided key.
  
  Equivalent to GET /content/{key}/path
  """
  contentMetadataPage(
    """The key of the content path to retrieve."""
    key: String!
    pageIndex: Int
    pageSize: Int
  ): ContentMetadataPage

  """
  Get the content type with the provided key.
  
  Equivalent to GET /contenttypes/{key}
  """
  contentType(
    """The key of the content type to retrieve."""
    key: String!
  ): ContentType

  """
  List content types using the provided options.
  
  Equivalent to GET /contenttypes
  """
  contentTypePage(
    """
    Only include types that are available for creation under the provided container type
    """
    forContainerType: String
    pageIndex: Int
    pageSize: Int

    "Indicates which sources should be included when listing content types.\r\nUse All to include content types from all sources or\r\nDefault to include content types without a specific sources."
    sources: [String]
  ): ContentTypePage

  """
  Get the display template with the provided key.
  
  Equivalent to GET /displaytemplates/{key}
  """
  displayTemplate(
    """The key of the display template to retrieve."""
    key: String!
  ): DisplayTemplate

  """
  List display templates using the provided options.
  
  Equivalent to GET /displaytemplates
  """
  displayTemplatePage(pageIndex: Int, pageSize: Int): DisplayTemplatePage

  """
  Get the property format with the provided key.
  
  Equivalent to GET /propertyformats/{key}
  """
  propertyFormat(
    """Indicates that a deleted property format may be returned."""
    allowDeleted: Boolean

    """The key of the property format to retrieve."""
    key: String!
  ): PropertyFormat

  """
  List all property formats using the provided options.
  
  Equivalent to GET /propertyformats
  """
  propertyFormatPage(pageIndex: Int, pageSize: Int): PropertyFormatPage

  """
  Get the property group with the provided key.
  
  Equivalent to GET /propertygroups/{key}
  """
  propertyGroup(
    """The key of the property group to retrieve."""
    key: String!
  ): PropertyGroup

  """
  List property groups using the provided options.
  
  Equivalent to GET /propertygroups
  """
  propertyGroupPage(
    "Indicates which property groups sources that should be listed.\r\nUse All to include groups from all sources or\r\nDefault to include groups without a specific sources."
    sources: [String]
  ): PropertyGroupPage
}

"""Changesets are used to group work on several content items together."""
type Changeset {
  """A timestamp indicating when this changeset was first created."""
  created: String

  """The username of the user that created this changeset."""
  createdBy: String

  """The name of this Changeset."""
  displayName: String!

  """The unique key of this Changeset."""
  key: String!
  lastModified: String

  """The source of this Changeset"""
  source: String
}

"""
Items in an changeset that contains a link to the specific content version.
"""
type ChangesetItem {
  """Gets/sets the changeset item category."""
  category: String

  """A reference to a specific content instance."""
  reference: ContentReference!
}

"""A reference to a specific content instance."""
type ContentReference {
  """The content key that identifies the content."""
  key: String

  """The name of the content locale"""
  locale: String

  """The identifier of a specific version of the content."""
  version: String
}

type ChangesetItemPage {
  """The items in this paged collection."""
  items: [ChangesetItem]

  """The zero-based index of the current page."""
  pageIndex: Int

  """
  The number of item in each page. Not necessarily the same as the number of items in this page.
  """
  pageSize: Int

  """
  The estimated total number of items in the collection. May be omitted if the total item count is unknown.
  """
  totalItemCount: Int
}

type ChangesetPage {
  """The items in this paged collection."""
  items: [Changeset]

  """The zero-based index of the current page."""
  pageIndex: Int

  """
  The number of item in each page. Not necessarily the same as the number of items in this page.
  """
  pageSize: Int

  """
  The estimated total number of items in the collection. May be omitted if the total item count is unknown.
  """
  totalItemCount: Int
}

"""Represents a version of a content item."""
type ContentItem {
  """
  The key that identifies the container content that this content item belongs to.
  """
  container: String

  """The content type of this content item."""
  contentType: String

  """
  Indicates a time when this content version should transition to published status. Must only be assigned when Status is set to Scheduled.
  """
  delayPublishUntil: String

  """The display name of this content item."""
  displayName: String!

  """Indicates a time when this content expired or should expire."""
  expired: String

  """The key that identifies this content item."""
  key: String!
  lastModified: String

  """
  The username of the user that made the latest modification to this content instance.
  """
  lastModifiedBy: String

  """The locale of this content instance."""
  locale: String

  """
  The key that identifies the owner of this content. Content that is own by another content is also known as an asset.
  """
  owner: String

  """
  Properties as they are defined by corresponding component or content type.
  """
  properties: JSON

  """
  Indicates a time when this content was published or should be published.
  """
  published: String

  """
  A string that represents the segment that should be used when routing or generate routes to the current content instance.
  """
  routeSegment: String

  """Represent the different status values of a content version."""
  status: VersionStatus

  """The version identifier of this content instance."""
  version: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum VersionStatus {
  DRAFT
  READY
  PUBLISHED
  PREVIOUS
  SCHEDULED
  REJECTED
  INREVIEW
}

type ContentItemPage {
  """The items in this paged collection."""
  items: [ContentItem]

  """The zero-based index of the current page."""
  pageIndex: Int

  """
  The number of item in each page. Not necessarily the same as the number of items in this page.
  """
  pageSize: Int

  """
  The estimated total number of items in the collection. May be omitted if the total item count is unknown.
  """
  totalItemCount: Int
}

type ContentMetadataPage {
  """The items in this paged collection."""
  items: [ContentMetadata]

  """The zero-based index of the current page."""
  pageIndex: Int

  """
  The number of item in each page. Not necessarily the same as the number of items in this page.
  """
  pageSize: Int

  """
  The estimated total number of items in the collection. May be omitted if the total item count is unknown.
  """
  totalItemCount: Int
}

"""Represents metadata about a content item."""
type ContentMetadata {
  """
  The key that identifies the container content that this content belongs to.
  """
  container: String

  """The content type of this content."""
  contentType: String

  """
  A timestamp, which if provided, indicates when this content was deleted.
  """
  deleted: String

  """The username of the user that deleted this content."""
  deletedBy: String

  """Indicates if the content contains any content items."""
  hasItems: Boolean

  """The key that identifies this content."""
  key: String

  """Set of locales that this content has been created for."""
  locales: JSON

  """
  The key that identifies the owner of this content. Content that is own by another content is also known as an asset.
  """
  owner: String
}

"""A writable implementation of an ContentType."""
type ContentType {
  """Represent the base type of a ContentType."""
  baseType: ContentBaseType

  """
  Provides a set of composition behaviors specifying how this content type can be used within compositions.
  """
  compositionBehaviors: [CompositionBehavior]

  """A timestamp indicating when this ContentType was first created."""
  created: String

  """A description of this ContentType."""
  description: String

  """The display name of this ContentType."""
  displayName: String

  "Provides a set of features that content based on this ContentType supports.\r\nThis value is assigned based on the BaseType and cannot be modified."
  features: [ContentTypeFeature]

  """The key that identifies this ContentType."""
  key: String!

  """Indicates the last time this content type was modified."""
  lastModified: String

  """
  The username of the user that made the latest modification to this ContentType.
  """
  lastModifiedBy: String

  """
  Provides a set of content types that can be created in container of this type
  """
  mayContainTypes: [String]

  """
  Provides a set of media file extensions that this content type can handle.
  """
  mediaFileExtensions: [String]

  """Dictionary with all custom properties of this ContentType."""
  properties: JSON

  """An value that is used to when sorting ContentType instances."""
  sortOrder: Int

  """A string that is used to indicate the source of this ContentType."""
  source: String

  """Specifies how this ContentType can be used."""
  usage: [ContentTypeUsage]
}

enum ContentBaseType {
  PAGE
  COMPONENT
  MEDIA
  IMAGE
  VIDEO
  FOLDER
  EXPERIENCE
  SECTION
  ELEMENT
}

enum CompositionBehavior {
  SECTIONENABLED
  ELEMENTENABLED
}

enum ContentTypeFeature {
  LOCALIZATION
  VERSIONING
  PUBLISHPERIOD
  ROUTING
  BINARY
}

enum ContentTypeUsage {
  PROPERTY
  INSTANCE
}

type ContentTypePage {
  """The items in this paged collection."""
  items: [ContentType]

  """The zero-based index of the current page."""
  pageIndex: Int

  """
  The number of item in each page. Not necessarily the same as the number of items in this page.
  """
  pageSize: Int

  """
  The estimated total number of items in the collection. May be omitted if the total item count is unknown.
  """
  totalItemCount: Int
}

"""Describes a display template that can be assigned to content."""
type DisplayTemplate {
  """Represent the base type of a ContentType."""
  baseType: ContentBaseType

  """
  The optional key of the content type this display template is valid for.
  """
  contentType: String

  """A timestamp indicating when this display template was first created."""
  created: String

  """The username of the user that created this display template."""
  createdBy: String

  """The display name of this display template."""
  displayName: String!

  "If this is the default display template for the associated base type,\r\nnode type or content type."
  isDefault: Boolean

  """The key that identifies this display template."""
  key: String!

  """A timestamp indicating when this display template was last modified."""
  lastModified: String

  """The username of the user that last modified this display template."""
  lastModifiedBy: String

  """The optional node type this display template is valid for."""
  nodeType: String

  """The available settings for this display template."""
  settings: JSON
}

type DisplayTemplatePage {
  """The items in this paged collection."""
  items: [DisplayTemplate]

  """The zero-based index of the current page."""
  pageIndex: Int

  """
  The number of item in each page. Not necessarily the same as the number of items in this page.
  """
  pageSize: Int

  """
  The estimated total number of items in the collection. May be omitted if the total item count is unknown.
  """
  totalItemCount: Int
}

"""
Represent the definition of semantic property formats for content items.
"""
type PropertyFormat {
  "Represent the basic type that a PropertyFormat\r\nis using for data storage and data transport."
  dataType: PropertyDataType

  """Indicates if this property format has been deleted."""
  deleted: Boolean

  """The name and identifier of this PropertyFormat."""
  displayName: String

  """Editor used for managing properties with this format."""
  editor: String

  """Settings for the editor."""
  editorSettings: JSON

  """Enumerations for the format."""
  enum: Enum

  "Represent the basic type that a PropertyFormat\r\nis using for data storage and data transport."
  itemType: PropertyDataType

  """The key that identifies this PropertyFormat."""
  key: String
}

enum PropertyDataType {
  STRING
  URL
  BOOLEAN
  INTEGER
  FLOAT
  DATETIME
  CONTENTREFERENCE
  CONTENT
  BINARY
  JSON
  ARRAY
  COMPONENT
}

"""Enumerations for the format."""
type Enum {
  values: [ValuesListItem]
}

type ValuesListItem {
  displayName: String
  value: JSON
}

type PropertyFormatPage {
  """The items in this paged collection."""
  items: [PropertyFormat]

  """The zero-based index of the current page."""
  pageIndex: Int

  """
  The number of item in each page. Not necessarily the same as the number of items in this page.
  """
  pageSize: Int

  """
  The estimated total number of items in the collection. May be omitted if the total item count is unknown.
  """
  totalItemCount: Int
}

"""Describes a property group of a ContentType in the CMS."""
type PropertyGroup {
  """The display name of this PropertyGroup."""
  displayName: String

  """The key that identifies this PropertyGroup."""
  key: String!

  """An value that is used to when sorting PropertyGroup instances."""
  sortOrder: Int

  """A string that is used to indicate the source of this PropertyGroup."""
  source: String
}

type PropertyGroupPage {
  """The items in this paged collection."""
  items: [PropertyGroup]

  """The zero-based index of the current page."""
  pageIndex: Int

  """
  The number of item in each page. Not necessarily the same as the number of items in this page.
  """
  pageSize: Int

  """
  The estimated total number of items in the collection. May be omitted if the total item count is unknown.
  """
  totalItemCount: Int
}

"""Warning: Not every request will work with this viewer type"""
type ViewerAnyAuth {
  """
  Gets the changeset with the provided key.
  
  Equivalent to GET /changesets/{key}
  """
  changeset(
    """The key of the changeset to retrieve."""
    key: String!
  ): Changeset

  """
  Gets the changeset item for the specified content reference.
  
  Equivalent to GET /changesets/{changeset}/items/{key}/versions/{version}
  """
  changesetItem(
    """The changeset key"""
    changeset: String!

    """The content key"""
    key: String!

    """The content version"""
    version: String!
  ): ChangesetItem

  "Lists the available changeset items for the specified changeset using\r\nthe provided options.\n\nEquivalent to GET /changesets/{changeset}/items"
  changesetItemPage(
    """The changeset key"""
    changeset: String!
    pageIndex: Int
    pageSize: Int
  ): ChangesetItemPage

  """
  Lists all changeset using the provided options.
  
  Equivalent to GET /changesets
  """
  changesetPage(pageIndex: Int, pageSize: Int): ChangesetPage

  """
  Get the content item with the provided key and version.
  
  Equivalent to GET /content/{key}/versions/{version}
  """
  contentItem(key: String!, locale: String, version: String!): ContentItem

  """
  List content versions based on the provided query options.
  
  Equivalent to GET /content/versions
  """
  contentItemPage(
    "Indicates which content locales that should be listed. Use 'NEUTRAL' to include locale-neutral content.\r\nLocale must be a valid IETF BCP-47 language tag."
    locales: [String]
    pageIndex: Int
    pageSize: Int

    """Indicates which status content versions must have to be listed."""
    statuses: [VersionStatus]
  ): ContentItemPage

  """
  List the assets that belongs to a content instance.
  
  Equivalent to GET /content/{key}/assets
  """
  contentListAssets(
    """Indicates which content types or base types to include in the list."""
    contentTypes: [String]

    """The key of the content to retrieve assets for."""
    key: String!
    pageIndex: Int
    pageSize: Int
  ): ContentMetadataPage

  """
  List the content items located in a specific container.
  
  Equivalent to GET /content/{key}/items
  """
  contentListItems(
    """Indicates which content types or base types to include in the list."""
    contentTypes: [String]

    """The key of the content to retrieve items for."""
    key: String!
    pageIndex: Int
    pageSize: Int
  ): ContentMetadataPage

  """
  List versions of the content item with the provided key and the provided options.
  
  Equivalent to GET /content/{key}/versions
  """
  contentListVersions(
    key: String!

    "Indicates which content locales that should be listed. Use 'NEUTRAL' to include locale-neutral content.\r\nLocale must be a valid IETF BCP-47 language tag."
    locales: [String]
    pageIndex: Int
    pageSize: Int

    """Indicates which status content versions must have to be listed."""
    statuses: [VersionStatus]
  ): ContentItemPage

  """
  Get shared metadata about the content instance with the provided key.
  
  Equivalent to GET /content/{key}
  """
  contentMetadata(
    """Indicates that metadata for a deleted content may be returned."""
    allowDeleted: Boolean

    """The key of the content to retrieve metadata for."""
    key: String!
  ): ContentMetadata

  """
  Get the content path with the provided key.
  
  Equivalent to GET /content/{key}/path
  """
  contentMetadataPage(
    """The key of the content path to retrieve."""
    key: String!
    pageIndex: Int
    pageSize: Int
  ): ContentMetadataPage

  """
  Get the content type with the provided key.
  
  Equivalent to GET /contenttypes/{key}
  """
  contentType(
    """The key of the content type to retrieve."""
    key: String!
  ): ContentType

  """
  List content types using the provided options.
  
  Equivalent to GET /contenttypes
  """
  contentTypePage(
    """
    Only include types that are available for creation under the provided container type
    """
    forContainerType: String
    pageIndex: Int
    pageSize: Int

    "Indicates which sources should be included when listing content types.\r\nUse All to include content types from all sources or\r\nDefault to include content types without a specific sources."
    sources: [String]
  ): ContentTypePage

  """
  Get the display template with the provided key.
  
  Equivalent to GET /displaytemplates/{key}
  """
  displayTemplate(
    """The key of the display template to retrieve."""
    key: String!
  ): DisplayTemplate

  """
  List display templates using the provided options.
  
  Equivalent to GET /displaytemplates
  """
  displayTemplatePage(pageIndex: Int, pageSize: Int): DisplayTemplatePage

  """
  Get the property format with the provided key.
  
  Equivalent to GET /propertyformats/{key}
  """
  propertyFormat(
    """Indicates that a deleted property format may be returned."""
    allowDeleted: Boolean

    """The key of the property format to retrieve."""
    key: String!
  ): PropertyFormat

  """
  List all property formats using the provided options.
  
  Equivalent to GET /propertyformats
  """
  propertyFormatPage(pageIndex: Int, pageSize: Int): PropertyFormatPage

  """
  Get the property group with the provided key.
  
  Equivalent to GET /propertygroups/{key}
  """
  propertyGroup(
    """The key of the property group to retrieve."""
    key: String!
  ): PropertyGroup

  """
  List property groups using the provided options.
  
  Equivalent to GET /propertygroups
  """
  propertyGroupPage(
    "Indicates which property groups sources that should be listed.\r\nUse All to include groups from all sources or\r\nDefault to include groups without a specific sources."
    sources: [String]
  ): PropertyGroupPage
}

"""Bearer auth credentials for security protocol 'Http'"""
input HttpInput {
  token: String
}

type Mutation {
  """
  A viewer that wraps all operations authenticated via security scheme 'Http', which is of type 'http' 'bearer'
  """
  mutationViewerBearerAuth(token: String!): MutationViewerBearerAuth

  """
  A viewer that wraps operations for all available authentication mechanisms
  """
  mutationViewerAnyAuth(http: HttpInput): MutationViewerAnyAuth
}

"""A viewer for security scheme 'Http'"""
type MutationViewerBearerAuth {
  """
  Creates a new changeset.
  
  Equivalent to POST /changesets
  """
  changesetsCreate(
    """Changesets are used to group work on several content items together."""
    changesetInput: ChangesetInput!
  ): Changeset

  """
  Creates the given changeset item.
  
  Equivalent to POST /changesets/{changeset}/items
  """
  changesetsCreateItem(
    """The changeset key"""
    changeset: String!

    """
    Items in an changeset that contains a link to the specific content version.
    """
    changesetItemInput: ChangesetItemInput!
  ): ChangesetItem

  """
  Deletes the changeset with the provided key. If a changeset with the provided key does not exist an error is returned.
  
  Equivalent to DELETE /changesets/{key}
  """
  changesetsDelete(
    """The key of the changeset to delete."""
    key: String!
  ): Changeset

  """
  Deletes the specified changeset item from the changeset.
  
  Equivalent to DELETE /changesets/{changeset}/items/{key}/versions/{version}
  """
  changesetsDeleteItem(
    """The changeset key"""
    changeset: String!

    """The content key"""
    key: String!

    """The content version"""
    version: String!
  ): ChangesetItem

  "Creates or replaces a changeset. If a changeset with the provided key exist it is replaced.\r\nOtherwise a new changeset is created.\n\nEquivalent to PUT /changesets/{key}"
  changesetsPut(
    """Changesets are used to group work on several content items together."""
    changesetInput: ChangesetInput!

    """The key of the changeset to update or create."""
    key: String!
  ): Changeset

  """
  Create a copy of the content item with the provided key.
  
  Equivalent to POST /content/{key}:copy
  """
  contentCopy(
    """Options for copying content."""
    copyContentOptionsInput: CopyContentOptionsInput

    """The key of the content item to copy."""
    key: String!
  ): ContentMetadata

  """
  Create a new content item.
  
  Equivalent to POST /content
  """
  contentCreate(
    """Represents a version of a content item."""
    contentItemInput: ContentItemInput!

    """Indicates that the content validation should be ignored."""
    skipValidation: Boolean
  ): ContentItem

  """
  Create a new version of a content item.
  
  Equivalent to POST /content/{key}/versions
  """
  contentCreateVersion(
    """Represents a version of a content item."""
    contentItemInput: ContentItemInput!

    """
    The key of the content item for which a new content version should be created.
    """
    key: String!

    """Indicates that the content validation should be ignored."""
    skipValidation: Boolean
  ): ContentItem

  """
  Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned.
  
  Equivalent to DELETE /content/{key}
  """
  contentDelete(
    """The key of the content item to delete."""
    key: String!

    """
    Indicates that the content item should be permanently deleted immediately or if it should be soft deleted first.
    """
    permanent: Boolean
  ): ContentMetadata

  """
  Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned.
  
  Equivalent to DELETE /content/{key}/versions
  """
  contentDeleteLocale(key: String!, locale: String): ContentItem

  """
  Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned.
  
  Equivalent to DELETE /content/{key}/versions/{version}
  """
  contentDeleteVersion(key: String!, version: String!): ContentItem

  """
  Update an existing content item. If a content item with the provided key does not exist an error is returned.
  
  Equivalent to PATCH /content/{key}
  """
  contentPatchMetadata(
    """
    String represents payload of content type 'application/merge-patch+json'
    """
    applicationMergePatchJsonInput: String!

    """The key of the content item to patch."""
    key: String!
  ): ContentMetadata

  """
  Update an existing content item. If a content item with the provided key does not exist an error is returned.
  
  Equivalent to PATCH /content/{key}/versions/{version}
  """
  contentPatchVersion(
    """
    String represents payload of content type 'application/merge-patch+json'
    """
    applicationMergePatchJsonInput: String!

    """The key of the content item that should be updated."""
    key: String!

    """The locale of the content that should be updated."""
    locale: String

    """Indicates that the content validation should be ignored."""
    skipValidation: Boolean

    """The version of the content that should be updated."""
    version: String!
  ): ContentItem

  """
  Create a new content type.
  
  Equivalent to POST /contenttypes
  """
  contentTypesCreate(
    """A writable implementation of an ContentType."""
    contentTypeInput: ContentTypeInput!
  ): ContentType

  """
  Deletes the content type with the provided key. If a content type with the provided key does not exist an error is returned.
  
  Equivalent to DELETE /contenttypes/{key}
  """
  contentTypesDelete(
    """The key of the content type to delete."""
    key: String!
  ): ContentType

  """
  Update an existing content type. If a content type with the provided key does not exist an error is returned.
  
  Equivalent to PATCH /contenttypes/{key}
  """
  contentTypesPatch(
    """
    String represents payload of content type 'application/merge-patch+json'
    """
    applicationMergePatchJsonInput: String!

    """
    Update the content type even though the changes might result in data loss.
    """
    ignoreDataLossWarnings: Boolean

    """The key of the content type to patch."""
    key: String!
  ): ContentType

  "Create or replace a content type. If a content type with the provided key exist it is replaced.\r\nOtherwise a new content type is created.\n\nEquivalent to PUT /contenttypes/{key}"
  contentTypesPut(
    """A writable implementation of an ContentType."""
    contentTypeInput: ContentTypeInput!

    """
    Update the content type even though the changes might result in data loss.
    """
    ignoreDataLossWarnings: Boolean

    """The key of the content type to update or create."""
    key: String!
  ): ContentType

  """
  Restore the deleted content item with the provided key. If a content item with the provided key is not deleted an error is returned.
  
  Equivalent to POST /content/{key}:undelete
  """
  contentUndelete(
    """The key of the content item to undelete."""
    key: String!
  ): ContentMetadata

  """
  Create a new display template.
  
  Equivalent to POST /displaytemplates
  """
  displayTemplatesCreate(
    """Describes a display template that can be assigned to content."""
    displayTemplateInput: DisplayTemplateInput!
  ): DisplayTemplate

  """
  Deletes the display template with the provided key.
  
  Equivalent to DELETE /displaytemplates/{key}
  """
  displayTemplatesDelete(
    """The key of the display template to delete."""
    key: String!
  ): DisplayTemplate

  """
  Update an existing display template.
  
  Equivalent to PATCH /displaytemplates/{key}
  """
  displayTemplatesPatch(
    """
    String represents payload of content type 'application/merge-patch+json'
    """
    applicationMergePatchJsonInput: String!

    """The key of the display template to patch."""
    key: String!
  ): DisplayTemplate

  "Create or replace a display template. If a display template with the provided key exist it is replaced.\r\nOtherwise a new display template is created.\n\nEquivalent to PUT /displaytemplates/{key}"
  displayTemplatesPut(
    """Describes a display template that can be assigned to content."""
    displayTemplateInput: DisplayTemplateInput!

    """The key of the display template to update or create."""
    key: String!
  ): DisplayTemplate

  "Request an access token. This endpoint only supports the 'client_credentials' grant type\r\nand will only issue short-lived tokens.\n\nEquivalent to POST /oauth/token"
  oauthToken(
    """Represents an OAuth token request."""
    oauthTokenRequestInput: OauthTokenRequestInput!
  ): OauthToken

  """
  Create a new property group.
  
  Equivalent to POST /propertygroups
  """
  propertyGroupsCreate(
    """Describes a property group of a ContentType in the CMS."""
    propertyGroupInput: PropertyGroupInput!
  ): PropertyGroup

  """
  Deletes the property group with the provided key.
  
  Equivalent to DELETE /propertygroups/{key}
  """
  propertyGroupsDelete(
    """The key of the property group to delete."""
    key: String!
  ): PropertyGroup

  """
  Update an existing property group.
  
  Equivalent to PATCH /propertygroups/{key}
  """
  propertyGroupsPatch(
    """
    String represents payload of content type 'application/merge-patch+json'
    """
    applicationMergePatchJsonInput: String!

    """The key of the property group to patch."""
    key: String!
  ): PropertyGroup

  "Create or replace a property group. If a property group with the provided key exist it is replaced.\r\nOtherwise a new property group is created.\n\nEquivalent to PUT /propertygroups/{key}"
  propertyGroupsPut(
    """The key of the property group to update or create."""
    key: String!

    """Describes a property group of a ContentType in the CMS."""
    propertyGroupInput: PropertyGroupInput!
  ): PropertyGroup
}

"""Changesets are used to group work on several content items together."""
input ChangesetInput {
  """A timestamp indicating when this changeset was first created."""
  created: String

  """The username of the user that created this changeset."""
  createdBy: String

  """The name of this Changeset."""
  displayName: String!

  """The unique key of this Changeset."""
  key: String!
  lastModified: String

  """The source of this Changeset"""
  source: String
}

"""
Items in an changeset that contains a link to the specific content version.
"""
input ChangesetItemInput {
  """Gets/sets the changeset item category."""
  category: String

  """A reference to a specific content instance."""
  reference: ContentReferenceInput!
}

"""A reference to a specific content instance."""
input ContentReferenceInput {
  """The content key that identifies the content."""
  key: String

  """The name of the content locale"""
  locale: String

  """The identifier of a specific version of the content."""
  version: String
}

"""Options for copying content."""
input CopyContentOptionsInput {
  """Indicates if deleted content could be used as source."""
  allowDeleted: Boolean

  """
  Optional key of the container where the copied content should be placed.
  """
  container: String

  """
  Indicates if published versions of the content should keep their published status rather than being created as a draft version at the destination.
  """
  keepPublishedStatus: Boolean

  """Optional key of the owner where the copied content should be placed."""
  owner: String
}

"""Represents a version of a content item."""
input ContentItemInput {
  """
  The key that identifies the container content that this content item belongs to.
  """
  container: String

  """The content type of this content item."""
  contentType: String

  """
  Indicates a time when this content version should transition to published status. Must only be assigned when Status is set to Scheduled.
  """
  delayPublishUntil: String

  """The display name of this content item."""
  displayName: String!

  """Indicates a time when this content expired or should expire."""
  expired: String

  """The key that identifies this content item."""
  key: String!
  lastModified: String

  """
  The username of the user that made the latest modification to this content instance.
  """
  lastModifiedBy: String

  """The locale of this content instance."""
  locale: String

  """
  The key that identifies the owner of this content. Content that is own by another content is also known as an asset.
  """
  owner: String

  """
  Properties as they are defined by corresponding component or content type.
  """
  properties: JSON

  """
  Indicates a time when this content was published or should be published.
  """
  published: String

  """
  A string that represents the segment that should be used when routing or generate routes to the current content instance.
  """
  routeSegment: String

  """Represent the different status values of a content version."""
  status: VersionStatus

  """The version identifier of this content instance."""
  version: String
}

"""A writable implementation of an ContentType."""
input ContentTypeInput {
  """Represent the base type of a ContentType."""
  baseType: ContentBaseType

  """
  Provides a set of composition behaviors specifying how this content type can be used within compositions.
  """
  compositionBehaviors: [CompositionBehavior]

  """A timestamp indicating when this ContentType was first created."""
  created: String

  """A description of this ContentType."""
  description: String

  """The display name of this ContentType."""
  displayName: String

  "Provides a set of features that content based on this ContentType supports.\r\nThis value is assigned based on the BaseType and cannot be modified."
  features: [ContentTypeFeature]

  """The key that identifies this ContentType."""
  key: String!

  """Indicates the last time this content type was modified."""
  lastModified: String

  """
  The username of the user that made the latest modification to this ContentType.
  """
  lastModifiedBy: String

  """
  Provides a set of content types that can be created in container of this type
  """
  mayContainTypes: [String]

  """
  Provides a set of media file extensions that this content type can handle.
  """
  mediaFileExtensions: [String]

  """Dictionary with all custom properties of this ContentType."""
  properties: JSON

  """An value that is used to when sorting ContentType instances."""
  sortOrder: Int

  """A string that is used to indicate the source of this ContentType."""
  source: String

  """Specifies how this ContentType can be used."""
  usage: [ContentTypeUsage]
}

"""Describes a display template that can be assigned to content."""
input DisplayTemplateInput {
  """Represent the base type of a ContentType."""
  baseType: ContentBaseType

  """
  The optional key of the content type this display template is valid for.
  """
  contentType: String

  """A timestamp indicating when this display template was first created."""
  created: String

  """The username of the user that created this display template."""
  createdBy: String

  """The display name of this display template."""
  displayName: String!

  "If this is the default display template for the associated base type,\r\nnode type or content type."
  isDefault: Boolean

  """The key that identifies this display template."""
  key: String!

  """A timestamp indicating when this display template was last modified."""
  lastModified: String

  """The username of the user that last modified this display template."""
  lastModifiedBy: String

  """The optional node type this display template is valid for."""
  nodeType: String

  """The available settings for this display template."""
  settings: JSON
}

"Represents an OAuth JSON Web Token (JWT) and\r\nits expiry in seconds."
type OauthToken {
  """Gets or sets the access token."""
  accessToken: String

  """Gets or sets the expiry time in seconds."""
  expiresIn: Int

  """Gets or sets the token type."""
  tokenType: String
}

"""Represents an OAuth token request."""
input OauthTokenRequestInput {
  """Get or sets the subject to act as."""
  actAs: String

  """Gets or sets the client id."""
  clientId: String

  """Gets or sets the client secret."""
  clientSecret: String

  """Gets or sets the grant type."""
  grantType: String
}

"""Describes a property group of a ContentType in the CMS."""
input PropertyGroupInput {
  """The display name of this PropertyGroup."""
  displayName: String

  """The key that identifies this PropertyGroup."""
  key: String!

  """An value that is used to when sorting PropertyGroup instances."""
  sortOrder: Int

  """A string that is used to indicate the source of this PropertyGroup."""
  source: String
}

"""Warning: Not every request will work with this viewer type"""
type MutationViewerAnyAuth {
  """
  Creates a new changeset.
  
  Equivalent to POST /changesets
  """
  changesetsCreate(
    """Changesets are used to group work on several content items together."""
    changesetInput: ChangesetInput!
  ): Changeset

  """
  Creates the given changeset item.
  
  Equivalent to POST /changesets/{changeset}/items
  """
  changesetsCreateItem(
    """The changeset key"""
    changeset: String!

    """
    Items in an changeset that contains a link to the specific content version.
    """
    changesetItemInput: ChangesetItemInput!
  ): ChangesetItem

  """
  Deletes the changeset with the provided key. If a changeset with the provided key does not exist an error is returned.
  
  Equivalent to DELETE /changesets/{key}
  """
  changesetsDelete(
    """The key of the changeset to delete."""
    key: String!
  ): Changeset

  """
  Deletes the specified changeset item from the changeset.
  
  Equivalent to DELETE /changesets/{changeset}/items/{key}/versions/{version}
  """
  changesetsDeleteItem(
    """The changeset key"""
    changeset: String!

    """The content key"""
    key: String!

    """The content version"""
    version: String!
  ): ChangesetItem

  "Creates or replaces a changeset. If a changeset with the provided key exist it is replaced.\r\nOtherwise a new changeset is created.\n\nEquivalent to PUT /changesets/{key}"
  changesetsPut(
    """Changesets are used to group work on several content items together."""
    changesetInput: ChangesetInput!

    """The key of the changeset to update or create."""
    key: String!
  ): Changeset

  """
  Create a copy of the content item with the provided key.
  
  Equivalent to POST /content/{key}:copy
  """
  contentCopy(
    """Options for copying content."""
    copyContentOptionsInput: CopyContentOptionsInput

    """The key of the content item to copy."""
    key: String!
  ): ContentMetadata

  """
  Create a new content item.
  
  Equivalent to POST /content
  """
  contentCreate(
    """Represents a version of a content item."""
    contentItemInput: ContentItemInput!

    """Indicates that the content validation should be ignored."""
    skipValidation: Boolean
  ): ContentItem

  """
  Create a new version of a content item.
  
  Equivalent to POST /content/{key}/versions
  """
  contentCreateVersion(
    """Represents a version of a content item."""
    contentItemInput: ContentItemInput!

    """
    The key of the content item for which a new content version should be created.
    """
    key: String!

    """Indicates that the content validation should be ignored."""
    skipValidation: Boolean
  ): ContentItem

  """
  Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned.
  
  Equivalent to DELETE /content/{key}
  """
  contentDelete(
    """The key of the content item to delete."""
    key: String!

    """
    Indicates that the content item should be permanently deleted immediately or if it should be soft deleted first.
    """
    permanent: Boolean
  ): ContentMetadata

  """
  Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned.
  
  Equivalent to DELETE /content/{key}/versions
  """
  contentDeleteLocale(key: String!, locale: String): ContentItem

  """
  Deletes the content item with the provided key. If a content item with the provided key does not exist an error is returned.
  
  Equivalent to DELETE /content/{key}/versions/{version}
  """
  contentDeleteVersion(key: String!, version: String!): ContentItem

  """
  Update an existing content item. If a content item with the provided key does not exist an error is returned.
  
  Equivalent to PATCH /content/{key}
  """
  contentPatchMetadata(
    """
    String represents payload of content type 'application/merge-patch+json'
    """
    applicationMergePatchJsonInput: String!

    """The key of the content item to patch."""
    key: String!
  ): ContentMetadata

  """
  Update an existing content item. If a content item with the provided key does not exist an error is returned.
  
  Equivalent to PATCH /content/{key}/versions/{version}
  """
  contentPatchVersion(
    """
    String represents payload of content type 'application/merge-patch+json'
    """
    applicationMergePatchJsonInput: String!

    """The key of the content item that should be updated."""
    key: String!

    """The locale of the content that should be updated."""
    locale: String

    """Indicates that the content validation should be ignored."""
    skipValidation: Boolean

    """The version of the content that should be updated."""
    version: String!
  ): ContentItem

  """
  Create a new content type.
  
  Equivalent to POST /contenttypes
  """
  contentTypesCreate(
    """A writable implementation of an ContentType."""
    contentTypeInput: ContentTypeInput!
  ): ContentType

  """
  Deletes the content type with the provided key. If a content type with the provided key does not exist an error is returned.
  
  Equivalent to DELETE /contenttypes/{key}
  """
  contentTypesDelete(
    """The key of the content type to delete."""
    key: String!
  ): ContentType

  """
  Update an existing content type. If a content type with the provided key does not exist an error is returned.
  
  Equivalent to PATCH /contenttypes/{key}
  """
  contentTypesPatch(
    """
    String represents payload of content type 'application/merge-patch+json'
    """
    applicationMergePatchJsonInput: String!

    """
    Update the content type even though the changes might result in data loss.
    """
    ignoreDataLossWarnings: Boolean

    """The key of the content type to patch."""
    key: String!
  ): ContentType

  "Create or replace a content type. If a content type with the provided key exist it is replaced.\r\nOtherwise a new content type is created.\n\nEquivalent to PUT /contenttypes/{key}"
  contentTypesPut(
    """A writable implementation of an ContentType."""
    contentTypeInput: ContentTypeInput!

    """
    Update the content type even though the changes might result in data loss.
    """
    ignoreDataLossWarnings: Boolean

    """The key of the content type to update or create."""
    key: String!
  ): ContentType

  """
  Restore the deleted content item with the provided key. If a content item with the provided key is not deleted an error is returned.
  
  Equivalent to POST /content/{key}:undelete
  """
  contentUndelete(
    """The key of the content item to undelete."""
    key: String!
  ): ContentMetadata

  """
  Create a new display template.
  
  Equivalent to POST /displaytemplates
  """
  displayTemplatesCreate(
    """Describes a display template that can be assigned to content."""
    displayTemplateInput: DisplayTemplateInput!
  ): DisplayTemplate

  """
  Deletes the display template with the provided key.
  
  Equivalent to DELETE /displaytemplates/{key}
  """
  displayTemplatesDelete(
    """The key of the display template to delete."""
    key: String!
  ): DisplayTemplate

  """
  Update an existing display template.
  
  Equivalent to PATCH /displaytemplates/{key}
  """
  displayTemplatesPatch(
    """
    String represents payload of content type 'application/merge-patch+json'
    """
    applicationMergePatchJsonInput: String!

    """The key of the display template to patch."""
    key: String!
  ): DisplayTemplate

  "Create or replace a display template. If a display template with the provided key exist it is replaced.\r\nOtherwise a new display template is created.\n\nEquivalent to PUT /displaytemplates/{key}"
  displayTemplatesPut(
    """Describes a display template that can be assigned to content."""
    displayTemplateInput: DisplayTemplateInput!

    """The key of the display template to update or create."""
    key: String!
  ): DisplayTemplate

  "Request an access token. This endpoint only supports the 'client_credentials' grant type\r\nand will only issue short-lived tokens.\n\nEquivalent to POST /oauth/token"
  oauthToken(
    """Represents an OAuth token request."""
    oauthTokenRequestInput: OauthTokenRequestInput!
  ): OauthToken

  """
  Create a new property group.
  
  Equivalent to POST /propertygroups
  """
  propertyGroupsCreate(
    """Describes a property group of a ContentType in the CMS."""
    propertyGroupInput: PropertyGroupInput!
  ): PropertyGroup

  """
  Deletes the property group with the provided key.
  
  Equivalent to DELETE /propertygroups/{key}
  """
  propertyGroupsDelete(
    """The key of the property group to delete."""
    key: String!
  ): PropertyGroup

  """
  Update an existing property group.
  
  Equivalent to PATCH /propertygroups/{key}
  """
  propertyGroupsPatch(
    """
    String represents payload of content type 'application/merge-patch+json'
    """
    applicationMergePatchJsonInput: String!

    """The key of the property group to patch."""
    key: String!
  ): PropertyGroup

  "Create or replace a property group. If a property group with the provided key exist it is replaced.\r\nOtherwise a new property group is created.\n\nEquivalent to PUT /propertygroups/{key}"
  propertyGroupsPut(
    """The key of the property group to update or create."""
    key: String!

    """Describes a property group of a ContentType in the CMS."""
    propertyGroupInput: PropertyGroupInput!
  ): PropertyGroup
}